function VisibilityPolygon(){}VisibilityPolygon.init=function(i){i=i||512;for(var n=0;n<i;n++)bounded.push([[0,0],[0,0]])},module.exports=VisibilityPolygon;const start=[0,0],bounded=[],map=[];var boundedLen=0;VisibilityPolygon.compute=function(i,n){var o=i[0],e=i[1],t=i[0],l=i[1];boundedLen=0;for(var s=n.length+5-bounded.length,y=0;y<s;y++)bounded.push([[0,0],[0,0]]);for(var y=0;y<n.length;++y){for(var r=0;r<2;++r)o=Math.min(o,n[y][r][0]),e=Math.min(e,n[y][r][1]),t=Math.max(t,n[y][r][0]),l=Math.max(l,n[y][r][1]);bounded[boundedLen][0][0]=n[y][0][0],bounded[boundedLen][0][1]=n[y][0][1],bounded[boundedLen][1][0]=n[y][1][0],bounded[boundedLen][1][1]=n[y][1][1],boundedLen++}--o,--e,++t,++l,bounded[boundedLen][0][0]=o,bounded[boundedLen][0][1]=e,bounded[boundedLen][1][0]=t,bounded[boundedLen][1][1]=e,boundedLen++,bounded[boundedLen][0][0]=t,bounded[boundedLen][0][1]=e,bounded[boundedLen][1][0]=t,bounded[boundedLen][1][1]=l,boundedLen++,bounded[boundedLen][0][0]=t,bounded[boundedLen][0][1]=l,bounded[boundedLen][1][0]=o,bounded[boundedLen][1][1]=l,boundedLen++,bounded[boundedLen][0][0]=o,bounded[boundedLen][0][1]=l,bounded[boundedLen][1][0]=o,bounded[boundedLen][1][1]=e,boundedLen++;for(var b=[],d=VisibilityPolygon.sortPoints(i,bounded,boundedLen),y=0;y<boundedLen;++y)map[y]=-1;var u=[];start[0]=i[0]+1,start[1]=i[1];for(var y=0;y<boundedLen;++y){var g=VisibilityPolygon.angle(bounded[y][0],i),a=VisibilityPolygon.angle(bounded[y][1],i),P=!1;g>-180&&g<=0&&a<=180&&a>=0&&a-g>180&&(P=!0),a>-180&&a<=0&&g<=180&&g>=0&&g-a>180&&(P=!0),P&&VisibilityPolygon.insert(y,u,i,bounded,start,map)}for(var y=0;y<d.length;){var V=!1,c=!1,h=y,f=bounded[d[y][0]][d[y][1]],p=u[0];do{if(-1!=map[d[y][0]]?(d[y][0]==p&&(V=!0,f=bounded[d[y][0]][d[y][1]]),VisibilityPolygon.remove(map[d[y][0]],u,i,bounded,f,map)):(VisibilityPolygon.insert(d[y][0],u,i,bounded,f,map),u[0]!=p&&(c=!0)),++y==d.length)break}while(d[y][2]<d[h][2]+VisibilityPolygon.epsilon);if(V){b.push(f);var v=VisibilityPolygon.intersectLines(bounded[u[0]][0],bounded[u[0]][1],i,f);VisibilityPolygon.equal(v,f)||b.push(v)}else c&&(b.push(VisibilityPolygon.intersectLines(bounded[p][0],bounded[p][1],i,f)),b.push(VisibilityPolygon.intersectLines(bounded[u[0]][0],bounded[u[0]][1],i,f)))}return b},VisibilityPolygon.computeViewport=function(i,n,o,e){for(var t=[],l=[[o[0],o[1]],[e[0],o[1]],[e[0],e[1]],[o[0],e[1]]],s=0;s<n.length;++s)if(!(n[s][0][0]<o[0]&&n[s][1][0]<o[0]||n[s][0][1]<o[1]&&n[s][1][1]<o[1]||n[s][0][0]>e[0]&&n[s][1][0]>e[0]||n[s][0][1]>e[1]&&n[s][1][1]>e[1])){for(var y=[],r=0;r<l.length;++r){var b=r+1;if(b==l.length&&(b=0),VisibilityPolygon.doLineSegmentsIntersect(n[s][0][0],n[s][0][1],n[s][1][0],n[s][1][1],l[r][0],l[r][1],l[b][0],l[b][1])){var d=VisibilityPolygon.intersectLines(n[s][0],n[s][1],l[r],l[b]);if(2!=d.length)continue;if(VisibilityPolygon.equal(d,n[s][0])||VisibilityPolygon.equal(d,n[s][1]))continue;y.push(d)}}for(var u=[n[s][0][0],n[s][0][1]];y.length>0;){for(var g=0,a=VisibilityPolygon.distance(u,y[0]),r=1;r<y.length;++r){var P=VisibilityPolygon.distance(u,y[r]);P<a&&(a=P,g=r)}t.push([[u[0],u[1]],[y[g][0],y[g][1]]]),u[0]=y[g][0],u[1]=y[g][1],y.splice(g,1)}t.push([u,[n[s][1][0],n[s][1][1]]])}for(var V=[],s=0;s<t.length;++s)VisibilityPolygon.inViewport(t[s][0],o,e)&&VisibilityPolygon.inViewport(t[s][1],o,e)&&V.push([[t[s][0][0],t[s][0][1]],[t[s][1][0],t[s][1][1]]]);var c=10*VisibilityPolygon.epsilon;return V.push([[o[0]-c,o[1]-c],[e[0]+c,o[1]-c]]),V.push([[e[0]+c,o[1]-c],[e[0]+c,e[1]+c]]),V.push([[e[0]+c,e[1]+c],[o[0]-c,e[1]+c]]),V.push([[o[0]-c,e[1]+c],[o[0]-c,o[1]-c]]),VisibilityPolygon.compute(i,V)},VisibilityPolygon.inViewport=function(i,n,o){return!(i[0]<n[0]-VisibilityPolygon.epsilon)&&(!(i[1]<n[1]-VisibilityPolygon.epsilon)&&(!(i[0]>o[0]+VisibilityPolygon.epsilon)&&!(i[1]>o[1]+VisibilityPolygon.epsilon)))},VisibilityPolygon.inPolygon=function(i,n){for(var o=n[0][0],e=0;e<n.length;++e)o=Math.min(n[e][0],o),o=Math.min(n[e][1],o);for(var t=[o-1,o-1],l=0,e=0;e<n.length;++e){var s=e+1;if(s==n.length&&(s=0),VisibilityPolygon.doLineSegmentsIntersect(t[0],t[1],i[0],i[1],n[e][0],n[e][1],n[s][0],n[s][1])){var y=VisibilityPolygon.intersectLines(t,i,n[e],n[s]);if(VisibilityPolygon.equal(i,y))return!0;VisibilityPolygon.equal(y,n[e])?VisibilityPolygon.angle2(i,t,n[s])<180&&++l:VisibilityPolygon.equal(y,n[s])?VisibilityPolygon.angle2(i,t,n[e])<180&&++l:++l}}return l%2!=0},VisibilityPolygon.convertToSegments=function(i,n){n=n||[];for(var o=0,e=0;e<i.length;++e)for(var t=0;t<i[e].length;++t){var l=t+1;l==i[e].length&&(l=0),n[o]=n[o]||[[0,0],[0,0]],n[o][0][0]=i[e][t][0],n[o][0][1]=i[e][t][1],n[o][1][0]=i[e][l][0],n[o][1][1]=i[e][l][1],o++}return n.slice(0,o),n},VisibilityPolygon.breakIntersections=function(i,n){n=n||[];for(var o=0;o<i.length;++o){for(var e=[],t=0;t<i.length;++t)if(o!=t&&VisibilityPolygon.doLineSegmentsIntersect(i[o][0][0],i[o][0][1],i[o][1][0],i[o][1][1],i[t][0][0],i[t][0][1],i[t][1][0],i[t][1][1])){var l=VisibilityPolygon.intersectLines(i[o][0],i[o][1],i[t][0],i[t][1]);if(2!=l.length)continue;if(VisibilityPolygon.equal(l,i[o][0])||VisibilityPolygon.equal(l,i[o][1]))continue;e.push(l)}for(var s=[i[o][0][0],i[o][0][1]];e.length>0;){for(var y=0,r=VisibilityPolygon.distance(s,e[0]),t=1;t<e.length;++t){var b=VisibilityPolygon.distance(s,e[t]);b<r&&(r=b,y=t)}n.push([[s[0],s[1]],[e[y][0],e[y][1]]]),s[0]=e[y][0],s[1]=e[y][1],e.splice(y,1)}n[o]=n[o]||[[0,0],[0,0]],n[o][0][0]=s[0],n[o][0][1]=s[1],n[o][1][0]=i[o][1][0],n[o][1][1]=i[o][1][1]}return n.slice(0,i.length),n},VisibilityPolygon.epsilon=1e-7,VisibilityPolygon.equal=function(i,n){return Math.abs(i[0]-n[0])<VisibilityPolygon.epsilon&&Math.abs(i[1]-n[1])<VisibilityPolygon.epsilon},VisibilityPolygon.remove=function(i,n,o,e,t,l){if(l[n[i]]=-1,i==n.length-1)return void n.pop();n[i]=n.pop(),l[n[i]]=i;var s=i,y=VisibilityPolygon.parent(s);if(0!=s&&VisibilityPolygon.lessThan(n[s],n[y],o,e,t))for(;s>0;){var y=VisibilityPolygon.parent(s);if(!VisibilityPolygon.lessThan(n[s],n[y],o,e,t))break;l[n[y]]=s,l[n[s]]=y;var r=n[s];n[s]=n[y],n[y]=r,s=y}else for(;;){var b=VisibilityPolygon.child(s),d=b+1;if(b<n.length&&VisibilityPolygon.lessThan(n[b],n[s],o,e,t)&&(d==n.length||VisibilityPolygon.lessThan(n[b],n[d],o,e,t))){l[n[b]]=s,l[n[s]]=b;var r=n[b];n[b]=n[s],n[s]=r,s=b}else{if(!(d<n.length&&VisibilityPolygon.lessThan(n[d],n[s],o,e,t)))break;l[n[d]]=s,l[n[s]]=d;var r=n[d];n[d]=n[s],n[s]=r,s=d}}};const insertHelp=[null,null];VisibilityPolygon.insert=function(i,n,o,e,t,l){if(0!=VisibilityPolygon.intersectLines(e[i][0],e[i][1],o,t,insertHelp).length){var s=n.length;for(n.push(i),l[i]=s;s>0;){var y=VisibilityPolygon.parent(s);if(!VisibilityPolygon.lessThan(n[s],n[y],o,e,t))break;l[n[y]]=s,l[n[s]]=y;var r=n[s];n[s]=n[y],n[y]=r,s=y}}};const lessThanOut1=[null,null],lessThanOut2=[null,null];VisibilityPolygon.lessThan=function(i,n,o,e,t){var l=VisibilityPolygon.intersectLines(e[i][0],e[i][1],o,t,lessThanOut1),s=VisibilityPolygon.intersectLines(e[n][0],e[n][1],o,t,lessThanOut2);if(!VisibilityPolygon.equal(l,s)){return VisibilityPolygon.distance(l,o)<VisibilityPolygon.distance(s,o)}var y=0;VisibilityPolygon.equal(l,e[i][0])&&(y=1);var r=0;VisibilityPolygon.equal(s,e[n][0])&&(r=1);var b=VisibilityPolygon.angle2(e[i][y],l,o),d=VisibilityPolygon.angle2(e[n][r],s,o);return b<180?d>180||d<b:b<d},VisibilityPolygon.parent=function(i){return Math.floor((i-1)/2)},VisibilityPolygon.child=function(i){return 2*i+1},VisibilityPolygon.angle2=function(i,n,o){var e=VisibilityPolygon.angle(i,n),t=VisibilityPolygon.angle(n,o),l=e-t;return l<0&&(l+=360),l>360&&(l-=360),l};var points=[];VisibilityPolygon.sortPoints=function(i,n,o){points.slice(0,o);for(var e=0;e<o;++e)for(var t=0;t<2;++t){var l=VisibilityPolygon.angle(n[e][t],i);points[2*e+t]=[e,t,l]}return points.sort(function(i,n){return i[2]-n[2]}),points};const rad2deg=180/Math.PI;VisibilityPolygon.angle=function(i,n){return Math.atan2(n[1]-i[1],n[0]-i[0])*rad2deg};const empty=[];VisibilityPolygon.intersectLines=function(i,n,o,e,t){var l=e[0]-o[0],s=e[1]-o[1],y=n[0]-i[0],r=n[1]-i[1],b=s*y-l*r;if(0!=b){var d=(l*(i[1]-o[1])-s*(i[0]-o[0]))/b;return t?(t[0]=i[0]-d*-y,t[1]=i[1]-d*-r,t):[i[0]-d*-y,i[1]-d*-r]}return empty},VisibilityPolygon.distance=function(i,n){var o=i[0]-n[0],e=i[1]-n[1];return o*o+e*e},VisibilityPolygon.isOnSegment=function(i,n,o,e,t,l){return(i<=t||o<=t)&&(t<=i||t<=o)&&(n<=l||e<=l)&&(l<=n||l<=e)},VisibilityPolygon.computeDirection=function(i,n,o,e,t,l){return a=(t-i)*(e-n),b=(o-i)*(l-n),a<b?-1:a>b?1:0},VisibilityPolygon.doLineSegmentsIntersect=function(i,n,o,e,t,l,s,y){return d1=VisibilityPolygon.computeDirection(t,l,s,y,i,n),d2=VisibilityPolygon.computeDirection(t,l,s,y,o,e),d3=VisibilityPolygon.computeDirection(i,n,o,e,t,l),d4=VisibilityPolygon.computeDirection(i,n,o,e,s,y),(d1>0&&d2<0||d1<0&&d2>0)&&(d3>0&&d4<0||d3<0&&d4>0)||0==d1&&VisibilityPolygon.isOnSegment(t,l,s,y,i,n)||0==d2&&VisibilityPolygon.isOnSegment(t,l,s,y,o,e)||0==d3&&VisibilityPolygon.isOnSegment(i,n,o,e,t,l)||0==d4&&VisibilityPolygon.isOnSegment(i,n,o,e,s,y)};